#ifndef EVOLIS_H
#define EVOLIS_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <wchar.h>
#include <sys/types.h>

#define EVOLIS_UNUSED_ATTR(x) (void)(x)

///
/// Table of contents:
/// -----------------
///
/// - LIBRARY MACROS [S]
/// - LIBRARY SETTINGS [S]
/// - ERROR MANAGEMENT [U]
/// - DEVICE ENUMERATION [S]
/// - DEVICE I/O [S]
/// - DEVICE INFOS [U]
/// - DEVICE STATE [U]
/// - CARD OPERATIONS [S]
/// - MAG ENCODING [U]
/// - IMAGE PROCESSING [U]
/// - PRINTING [U]
/// - LOGGING [U]
/// - FILE HELPERS [S]
///
/// [S]: Stable API.
/// [U]: Unstable API.

///
/// ToC/LIBRARY MACROS
/// ------------------
///

///
/// LibEvolis's version macros.
///
/// `EVOLIS_VERSION` expands to a numeric value of the form 0xMMNNPP (MM = major, NN = minor, PP = patch)
/// that specifies the library's version number. For example, if you compile your
/// application against LibEvolis 1.0.0, the EVOLIS_VERSION macro will expand to 0x010000.
///
/// `EVOLIS_VERSION_STR` expands to a string that specifies library's version number (for example, "1.0.0").
///
/// These macros are the version against which the application is compiled.
///

#define EVOLIS_VERSION_MAJOR 1
#define EVOLIS_VERSION_MINOR 0
#define EVOLIS_VERSION_PATCH 0

#define EVOLIS_VERSION_CHECK(major, minor, patch) ((major<<16)|(minor<<8)|(patch))

#define EVOLIS_VERSION EVOLIS_VERSION_CHECK(EVOLIS_VERSION_MAJOR, EVOLIS_VERSION_MINOR, EVOLIS_VERSION_PATCH)

#define EVOLIS_VERSION_STR (EVOLIS_STR(EVOLIS_VERSION_MAJOR) "." EVOLIS_STR(EVOLIS_VERSION_MINOR) "." EVOLIS_STR(EVOLIS_VERSION_PATCH))

///
/// LibEvolis's export macros.
/// The options are:
///   - EVOLIS_BUILD defined: We are building the library.
///   - EVOLIS_SHARED defined: Library is being built in shared mode.
///   - EVOLIS_STATIC defined: Library is being build in static mode.
///

#ifdef _WIN32
#  define EVOLIS_DECL_EXPORT __declspec(dllexport)
#  define EVOLIS_DECL_IMPORT __declspec(dllimport)
#  define ssize_t int
#else
#  define EVOLIS_DECL_EXPORT
#  define EVOLIS_DECL_IMPORT
#endif

#if defined(EVOLIS_SHARED) || !defined(EVOLIS_STATIC)
#  ifdef EVOLIS_STATIC
#    error "Both EVOLIS_SHARED and EVOLIS_STATIC defined, please make up your mind"
#  endif
#  ifndef EVOLIS_SHARED
#    define EVOLIS_SHARED
#  endif
#  ifdef EVOLIS_BUILD
#    define EVOLIS_LIB EVOLIS_DECL_EXPORT
#  else
#    define EVOLIS_LIB EVOLIS_DECL_IMPORT
#  endif
#else
#  define EVOLIS_LIB
#endif

#define EVOLIS_STRX(x) #x
#define EVOLIS_STR(x) EVOLIS_STRX(x)

/* #undef HAVE_EVOLIS_IMAGEPROC */
/* #undef HAVE_EVOLIS_NISCASDK */

#define EVOLIS_DEF_CARD_WIDTH 2048
#define EVOLIS_DEF_CARD_HEIGHT 1300

///
/// ToC/LIBRARY SETTINGS
/// --------------------
///

/// A set of options to customize library behavior.
///
/// @see evolis_get()
/// @see evolis_set()
typedef enum evolis_opt_e {
    /// Defines where to save the generated .prn file.
    /// The default value is NULL (file not saved).
    EVOLIS_OP_PRNFILE,

    /// Defines where to save the bitmap generated by drawing functions (set image,
    /// set text, set barcode). The "%s" flag will be replaced with the face name.
    ///
    /// The default value is NULL (bitmap not saved).
    EVOLIS_OP_BMPFILE
} evolis_opt_t;

/// Get library version at runtime.
EVOLIS_LIB const char* evolis_version();

/// Set library option.
EVOLIS_LIB void evolis_set(evolis_opt_t key, const char* value);

/// Get library option.
EVOLIS_LIB const char* evolis_get(evolis_opt_t key);

///
/// ToC/ERROR MANAGEMENT
/// --------------------
///

/// List of error codes generated by the library. Most of the functions of the
/// library will return a value `>= 0` on success while a value of `-1` means
/// that there was an error. Making a call to `evolis_last_error()` or
/// `evolis_last_error_string()` will give you details on the error.
///
/// @see evolis_last_error()
/// @see evolis_last_error_string()
typedef enum evolis_error_e {
    EVOLIS_ER_NONE,                //!< No error.
    EVOLIS_ER_INTERNALERR,         //!< Internal error.

    // evolis_file_*
    EVOLIS_ER_READING_FILE,        //!< Error reading file, see errno.
    EVOLIS_ER_WRITING_FILE,        //!< Error writing file, see errno.

    // evolis_print_exec
    EVOLIS_ER_PR_PROCESSING,       //!< Error while processing the data (options or bitmaps).
    EVOLIS_ER_PR_RESERVE,          //!< Error while reserving a print session.
    EVOLIS_ER_PR_PRINTING,         //!< Error while printing (see printer status).
} evolis_error_t;

/// Last error code generated by the library.
EVOLIS_LIB evolis_error_t evolis_last_error();

/// Last error string generated by the library.
EVOLIS_LIB const char* evolis_last_error_string();

///
/// ToC/DEVICE ENUMERATION
/// ----------------------
///

typedef enum evolis_link_e {
    EVOLIS_LI_INVALID,
    EVOLIS_LI_TCP,
    EVOLIS_LI_USB,
    EVOLIS_LI_FILE,
} evolis_link_t;

typedef enum evolis_mark_e {
    EVOLIS_MA_INVALID = 0x00,
    EVOLIS_MA_EVOLIS        = 0x01,
    EVOLIS_MA_BADGY         = 0x02,
    EVOLIS_MA_EDIKIO        = 0x04,
} evolis_mark_t;

typedef enum evolis_model_e {
    EVOLIS_MO_INVALID = 0x00,
    EVOLIS_MO_EVOLIS_ZENIUS        = 0x00000001,
    EVOLIS_MO_EVOLIS_PRIMACY       = 0x00000002,
    EVOLIS_MO_EVOLIS_ELYPSO        = 0x00000004,
    EVOLIS_MO_EVOLIS_APTEO         = 0x00000008,
    EVOLIS_MO_EVOLIS_KC100         = 0x00000010,
    EVOLIS_MO_EVOLIS_KC100B        = 0x00000020,
    EVOLIS_MO_EVOLIS_KC200         = 0x00000040,
    EVOLIS_MO_EVOLIS_KC200B        = 0x00000080,
    EVOLIS_MO_EVOLIS_KM500B        = 0x00000100,
    EVOLIS_MO_EVOLIS_KM2000B       = 0x00000200,
    EVOLIS_MO_EVOLIS_ALTESS        = 0x00000400,
    EVOLIS_MO_EVOLIS_LAMINATION_MODULE   = 0x00000800,
    EVOLIS_MO_EVOLIS_AVANSIA       = 0x00001000,
    EVOLIS_MO_EVOLIS_AGILIA        = 0x00002000,
    EVOLIS_MO_EVOLIS_EXCELIO       = 0x00004000,
    EVOLIS_MO_EVOLIS_PRIMACY2      = 0x00008000,
    EVOLIS_MO_BADGY100             = 0x01000000,
    EVOLIS_MO_BADGY200             = 0x02000000,
    EVOLIS_MO_EDIKIO_FLEX          = 0x04000000,
} evolis_model_t;

typedef struct evolis_device_s {
    char            id[128];
    wchar_t         name[256];
    char            uri[512];
    evolis_mark_t   mark;
    evolis_model_t  model;
    bool            isSupervised;
    evolis_link_t   link;
} evolis_device_t;

/// Get device list.
EVOLIS_LIB int evolis_get_devices(evolis_device_t** devices, int marks, int models);

/// Free device list returned by evolis_get_devices().
EVOLIS_LIB void evolis_free_devices(evolis_device_t* devices);

/// Returns a string describing the mark argument.
EVOLIS_LIB const char* evolis_get_mark_name(evolis_mark_t mark);

/// Returns a string describing the model argument.
EVOLIS_LIB const char* evolis_get_model_name(evolis_model_t model);

///
/// ToC/DEVICE I/O
/// --------------
///

/// An internal type representing the device context.
///
/// @see evolis_open()
/// @see evolis_open2()
/// @see evolis_close()
typedef void evolis_t;

/// The printer type is used to establish the connection to the printer. All
/// Evolis printers have the save communication protocol except for the Avansia
/// which have a specific one.
///
/// Over IP, the printer type can be detected thus you can use the
/// `EVOLIS_TY_AUTO` enum value. In any case, specifying the right printer type
/// is more efficient.
///
/// @see evolis_open2()
typedef enum evolis_type_e {
    EVOLIS_TY_AUTO,
    EVOLIS_TY_EVOLIS,
    EVOLIS_TY_AVANSIA,
} evolis_type_t;

/// List of error management modes of the printer.
typedef enum evolis_error_management_e {
    EVOLIS_EM_UNKNOWN    = -1,

    /// Means that the printer manages errors.
    EVOLIS_EM_PRINTER    = 0,

    /// Let the software using the printer manage errors.
    EVOLIS_EM_SOFTWARE   = 2,

    /// Means that the printer is supervised by the Evolis Premium Suite.
    /// This value can't be set. It can only be read.
    EVOLIS_EM_SUPERVISED = 38,
} evolis_error_management_t;

/// Connect to the printer referenced by the `name` argument.
EVOLIS_LIB evolis_t* evolis_open(const wchar_t* name, bool supervised);

/// Open direct connection to a printer.
/// This is used when no driver is available (Android, iOS or Linux without driver).
EVOLIS_LIB evolis_t* evolis_open2(const char* device, evolis_type_t type);

/// Close connection to the printer.
EVOLIS_LIB void evolis_close(evolis_t* printer);

/// Set io timeout value.
EVOLIS_LIB void evolis_set_timeout(evolis_t* printer, int ms);

/// Get io timeout value.
EVOLIS_LIB int evolist_get_timeout(evolis_t* printer);

/// Read data from the printer.
EVOLIS_LIB ssize_t evolis_read(evolis_t* printer, char* data, size_t maxSize);

/// Send data to the printer.
EVOLIS_LIB ssize_t evolis_write(evolis_t* printer, const char* data, size_t size);

/// Send a command to the printer then read the reply.
EVOLIS_LIB ssize_t evolis_command(evolis_t* printer, const char* cmd, size_t cmdSize, char* reply, size_t replyMaxSize);

/// Make a reservation of the printer (claim).
EVOLIS_LIB int evolis_reserve(evolis_t* printer);

/// Release the reservation of the printer.
EVOLIS_LIB int evolis_release(evolis_t* printer);

/// Software reset of the printer.
EVOLIS_LIB int evolis_reset(evolis_t* printer, int timeout, char* timeouted);

/// Get error management mode of the printer (see evolis_error_management_t).
EVOLIS_LIB int evolis_get_error_management(evolis_t* printer, evolis_error_management_t* em);

/// Set error management mode of the printer (PRINTER or SOFTWARE only).
EVOLIS_LIB int evolis_set_error_management(evolis_t* printer, evolis_error_management_t em);

///
/// ToC/DEVICE INFOS
/// ----------------
///

/// The printer infos struct contains general informations of the printer. It is
/// populated when calling `evolis_open()` function. You can retrieve it by
/// calling `evolis_infos()`.
typedef struct evolis_infos_s {
    wchar_t         name[64];                   //!< The device name.
    char            nameA[64];                  //!< The device name in ANSI.
    evolis_type_t   type;                       //!< The device type (Evolis or Avansia).
    evolis_mark_t   mark;
    char            markName[16];
    evolis_model_t  model;
    char            modelName[16];              //!< The name of the printer model.
    uint32_t        modelId;                    //!< An id representing the printer model.
                                                //!< Always ``0`` for Avansia printers.
    char            fwVersion[16];              //!< The firmware version.
    char            serialNumber[16];           //!< Serial number of the printer.
    char            printHeadKitNumber[16];     //!< Serial number of the print head kit.
    char            zone[16];                   //!< The printer zone.
    bool            hasFlip;                    //!< ``1`` if the printer can flip the card (duplex mode), ``0`` otherwise.
    bool            hasEthernet;                //!< ``1`` if the printer has ethernet feature, ``0`` otherwise.
    bool            hasWifi;                    //!< ``1`` if the printer has wifi feature, ``0`` otherwise.
    bool            hasLaminator;               //!< ``1`` if the printer has a laminator, ``0`` otherwise.
    bool            hasMagEnc;                  //!< ``1`` if the printer has mag encoding feature, ``0`` otherwise.
    bool            hasSmartEnc;                //!< ``1`` if the printer has smart encoding feature, ``0`` otherwise.
    bool            hasContactLessEnc;          //!< ``1`` if the printer has contact less feature, ``0`` otherwise.
    bool            hasLcd;                     //!< ``1`` if the printer has LCD screen feature, ``0`` otherwise.
    bool            hasKineclipse;              //!< ``1`` if the printer has kineclipse feature, ``0`` otherwise.
    bool            hasLock;                    //!< ``1`` if the printer has lock system feature, ``0`` otherwise.

    uint32_t        insertionCaps;              //!< A bitmask containing supported insertion modes.
    uint32_t        ejectionCaps;               //!< A bitmask containing supported ejection modes.
    uint32_t        rejectionCaps;              //!< A bitmask containing supported rejection modes.

    char            lcdFwVersion[16];           //!< The LCD screen firmware version.
    char            lcdGraphVersion[16];        //!< The LCD screen Graphical Resources version.
} evolis_infos_t;

/// List of ribbon accepted by Evolis printers.
typedef enum evolis_ribbon_type_e {
    EVOLIS_RT_UNKNOWN   = -1,
    EVOLIS_RT_YMCFK           = 1002,
    EVOLIS_RT_YMCK            = 1000,
    EVOLIS_RT_YMCK_HALF       = 1050,
    EVOLIS_RT_YMCKH           = 1003,
    EVOLIS_RT_YMCKI           = 1004,
    EVOLIS_RT_YMCKK           = 1001,
    EVOLIS_RT_YMCKK_HALF      = 1051,
    EVOLIS_RT_YMCKKI          = 1005,
    EVOLIS_RT_YMCKO           = 0,    //!< COLOR PANELS (YMC), BLACK PANEL AND OVERLAY PANEL.
    EVOLIS_RT_YMCKO_HALF      = 3,    //!< SAME AS YMCKO WITH HALF COLOR PANELS.
    EVOLIS_RT_YMCKO_THIRD     = 5,    //!< SAME AS YMCKO WITH THIRD OF COLOR PANELS.
    EVOLIS_RT_YMCKOK          = 4,    //!< SAME AS YMCKO WITH A BLACK PANE AT THE END.
    EVOLIS_RT_YMCKOK_THIRD    = 9,    //!< SAME AS YMCKOK WITH THIRD OF COLOR PANELS.
    EVOLIS_RT_YMCKOKO_HALF    = 10,
    EVOLIS_RT_K               = 100,  //!< BLACK RIBBON.
    EVOLIS_RT_KO              = 1,    //!< BLACK PLUS OVERLAY PANELS.
    EVOLIS_RT_SOKO            = 12,   //!< SILVER, OVERLAY, BLACK AND OVERLAY.
    EVOLIS_RT_H               = 91,   //!< HOLOGRAM RIBBON.
    EVOLIS_RT_BLUE            = 101,  //!< BLUE RIBBON.
    EVOLIS_RT_GREEN           = 102,  //!< GREEN RIBBON.
    EVOLIS_RT_RED             = 103,  //!< RED RIBBON.
    EVOLIS_RT_WHITE           = 105,  //!< WHITE RIBBON.
    EVOLIS_RT_GOLD            = 106,  //!< GOLD RIBBON.
    EVOLIS_RT_SILVER          = 107,  //!< SILVER RIBBON.
    EVOLIS_RT_SCRATCH         = 108,  //!< A RIBBON THAT YOU CAN SCRATCH.
    EVOLIS_RT_SIGNATURE       = 114,  //!< A RIBBON TO ALLOW HUMAN SIGNATURE WITH A PEN.
    EVOLIS_RT_KFLEX           = 112,  //!< SPECIFIC K RIBBON.
    EVOLIS_RT_KPRIME          = 115,  //!< SPECIFIC K RIBBON.
} evolis_ribbon_type_t;

/// Structure containing ribbon informations.
///
/// @see evolis_ribbon()
typedef struct evolis_ribbon_s {
    char                    description[64];
    char                    zone[8];
    evolis_ribbon_type_t    type;
    int                     capacity;
    int                     remaining;
    int                     progress;
    char                    productCode[16];
    uint32_t                batchNumber;
    char                    buildAt[24];
    char                    serialNumber[24];
    char                    internalCode[24];
} evolis_ribbon_t;

typedef struct evolis_cleaning_s {
    int  totalCardCount;                    //!< Number of card inserted.

    int  cardCount;                         //!< Number of card inserted since last cleaning.
    int  cardCountBeforeWarning;            //!< Remaining card count before warning.
    int  cardCountBeforeWarrantyLost;       //!< Remaining card count before warranty lost.

    int  cardCountAtLastCleaning;           //!< Number of card inserted at last cleaning.

    int  regularCleaningCount;              //!< Number of regular cleaning.
    int  advancedCleaningCount;             //!< Number of advanced cleaning.

    bool printHeadUnderWarranty;            //!< Print head under warranty or not.
} evolis_cleaning_t;

/// Get printer infos.
EVOLIS_LIB int evolis_get_infos(evolis_t* printer, evolis_infos_t* infos);

/// Get ribbon infos.
EVOLIS_LIB int evolis_get_ribbon(evolis_t* printer, evolis_ribbon_t* ribbon);

/// Get cleaning infos.
EVOLIS_LIB int evolis_get_cleaning(evolis_t* printer, evolis_cleaning_t* infos);

///
/// ToC/DEVICE STATE
/// ----------------
///

typedef enum evolis_major_state_e {
    EVOLIS_MJ_OFF,
    EVOLIS_MJ_READY,
    EVOLIS_MJ_WARNING,
    EVOLIS_MJ_ERROR,
} evolis_major_state_t;

typedef enum evolis_minor_state_e {
    EVOLIS_MI_DEVICE_UNKNOWN,
    EVOLIS_MI_DEVICE_UNMANAGED,
    EVOLIS_MI_DEVICE_MANAGEMENT_INITIALIZING,
    EVOLIS_MI_DEVICE_OFFLINE,
    EVOLIS_MI_DEVICE_STANDBY_MODE,
    EVOLIS_MI_DEVICE_FULL_SLEEP_MODE,
    EVOLIS_MI_DEVICE_READY,
    EVOLIS_MI_DEVICE_STATUS_DISABLED,
    EVOLIS_MI_DEVICE_BUSY,
    EVOLIS_MI_DEVICE_MANAGEMENT_UNINITIALIZED,
    EVOLIS_MI_DEVICE_INTERNALERROR,
    EVOLIS_MI_DEVICE_ERR_MAGNETIC_DATA,
    EVOLIS_MI_DEVICE_INF_ENCODING_RUNNING,
    EVOLIS_MI_DEVICE_INF_CLEANING_RUNNING,
    EVOLIS_MI_DEVICE_INF_PRINTING_RUNNING,
    EVOLIS_MI_DEVICE_INF_MECHANISM_BUSY,
    EVOLIS_MI_DEVICE_INF_UPDATING_FIRMWARE,
    EVOLIS_MI_LAMINATOR_INF_LAMINATING_RUNNING,
    EVOLIS_MI_LAMINATOR_INF_LAMI_CLEANING_RUNNING,
    EVOLIS_MI_LAMINATOR_INF_LAMI_UPDATING_FIRMWARE,
    EVOLIS_MI_LAMINATOR_INF_LAMINATE_UNKNOWN,
    EVOLIS_MI_LAMINATOR_INF_LAMINATE_LOW,
    EVOLIS_MI_LAMINATOR_DEF_NO_LAMINATE,
    EVOLIS_MI_LAMINATOR_DEF_LAMINATE_END,
    EVOLIS_MI_LAMINATOR_ERR_LAMINATE_END,
    EVOLIS_MI_LAMINATOR_ERR_LAMINATE,
    EVOLIS_MI_LAMINATOR_DEF_LAMINATE_UNSUPPORTED,
    EVOLIS_MI_LAMINATOR_ERR_LAMI_MECHANICAL,
    EVOLIS_MI_LAMINATOR_DEF_LAMI_COVER_OPEN,
    EVOLIS_MI_LAMINATOR_ERR_LAMI_COVER_OPEN,
    EVOLIS_MI_LAMINATOR_INF_LAMI_TEMP_NOT_READY,
    EVOLIS_MI_LAMINATOR_ERR_LAMI_TEMPERATURE,
    EVOLIS_MI_LAMINATOR_DEF_LAMI_HOPPER_FULL,
    EVOLIS_MI_TRIVIAL_RIBBON_LOW,
    EVOLIS_MI_TRIVIAL_DEF_COVER_OPEN,
    EVOLIS_MI_TRIVIAL_ERR_FEEDER_ERROR,
    EVOLIS_MI_TRIVIAL_ERR_RIBBON_ERROR,
    EVOLIS_MI_TRIVIAL_ERR_COVER_OPEN,
    EVOLIS_MI_TRIVIAL_DEF_NO_RIBBON,
    EVOLIS_MI_TRIVIAL_DEF_FEEDER_EMPTY,
    EVOLIS_MI_STDEVOLIS_ERR_MECHANICAL,
    EVOLIS_MI_STDEVOLIS_ERR_RIBBON_ERROR,
    EVOLIS_MI_STDEVOLIS_ERR_COVER_OPEN,
    EVOLIS_MI_STDEVOLIS_ERR_HEAD_TEMP,
    EVOLIS_MI_STDEVOLIS_ERR_NO_OPTION,
    EVOLIS_MI_STDEVOLIS_ERR_REJECT_BOX_FULL,
    EVOLIS_MI_STDEVOLIS_ERR_BAD_RIBBON,
    EVOLIS_MI_STDEVOLIS_ERR_BLANK_TRACK,
    EVOLIS_MI_STDEVOLIS_ERR_MAGNETIC_DATA,
    EVOLIS_MI_STDEVOLIS_ERR_READ_MAGNETIC,
    EVOLIS_MI_STDEVOLIS_ERR_WRITE_MAGNETIC,
    EVOLIS_MI_STDEVOLIS_DEF_RECEPTACLE_OPEN,
    EVOLIS_MI_STDEVOLIS_DEF_REJECT_BOX_FULL,
    EVOLIS_MI_STDEVOLIS_ERR_HOPPER_FULL,
    EVOLIS_MI_STDEVOLIS_DEF_HOPPER_FULL,
    EVOLIS_MI_STDEVOLIS_DEF_CARD_ON_EJECT,
    EVOLIS_MI_STDEVOLIS_DEF_WAIT_CARD,
    EVOLIS_MI_STDEVOLIS_DEF_FEEDER_EMPTY,
    EVOLIS_MI_STDEVOLIS_DEF_COOLING,
    EVOLIS_MI_STDEVOLIS_DEF_COVER_OPEN,
    EVOLIS_MI_STDEVOLIS_DEF_RIBBON_ENDED,
    EVOLIS_MI_STDEVOLIS_DEF_NO_RIBBON,
    EVOLIS_MI_STDEVOLIS_DEF_PRINTER_LOCKED,
    EVOLIS_MI_STDEVOLIS_INF_WRONG_ZONE_ALERT,
    EVOLIS_MI_STDEVOLIS_INF_WRONG_ZONE_RIBBON,
    EVOLIS_MI_STDEVOLIS_INF_WRONG_ZONE_EXPIRED,
    EVOLIS_MI_STDEVOLIS_INF_CLEANING_REQUIRED,
    EVOLIS_MI_STDEVOLIS_INF_CLEAN_LAST_OUTWARRANTY,
    EVOLIS_MI_STDEVOLIS_INF_CLEANING_ADVANCED,
    EVOLIS_MI_STDEVOLIS_INF_CLEANING,
    EVOLIS_MI_STDEVOLIS_INF_RIBBON_LOW,
    EVOLIS_MI_STDEVOLIS_ERR_FEEDER_ERROR,
    EVOLIS_MI_STDEVOLIS_ERR_RIBBON_ENDED,
    EVOLIS_MI_STDEVOLIS_OPT_MAGNETIC,
    EVOLIS_MI_STDEVOLIS_DEF_UNSUPPORTED_RIBBON,
    EVOLIS_MI_STDEVOLIS_OPT_FLIP,
    EVOLIS_MI_STDEVOLIS_NOT_FLIP_ACT,
    EVOLIS_MI_STDEVOLIS_OPT_EXTENDED_RESOLUTION,
    EVOLIS_MI_STDEVOLIS_INF_FEEDER_NEAR_EMPTY,
    EVOLIS_MI_STDEVOLIS_ERR_FEATURE,
    EVOLIS_MI_STDEVOLIS_DEF_REMOVE_RIBBON,
    EVOLIS_MI_AVANSIA_DEF_FEEDER_EMPTY,
    EVOLIS_MI_AVANSIA_ERR_FEEDER_EMPTY,
    EVOLIS_MI_AVANSIA_DEF_COVER_OPEN,
    EVOLIS_MI_AVANSIA_ERR_COVER_OPEN,
    EVOLIS_MI_AVANSIA_DEF_TEMP_TOOLOW,
    EVOLIS_MI_AVANSIA_DEF_RIBBON_ENDED,
    EVOLIS_MI_AVANSIA_ERR_RIBBON_ENDED,
    EVOLIS_MI_AVANSIA_DEF_RIBBON_ERROR,
    EVOLIS_MI_AVANSIA_ERR_RIBBON_ERROR,
    EVOLIS_MI_AVANSIA_DEF_FILM_ENDED,
    EVOLIS_MI_AVANSIA_ERR_FILM_ENDED,
    EVOLIS_MI_AVANSIA_DEF_FILM_ERROR,
    EVOLIS_MI_AVANSIA_ERR_FILM_ERROR,
    EVOLIS_MI_AVANSIA_DEF_RIBBON_FILM_ENDED,
    EVOLIS_MI_AVANSIA_ERR_RIBBON_FILM_ENDED,
    EVOLIS_MI_AVANSIA_ERR_CARD_JAM,
    EVOLIS_MI_AVANSIA_ERR_SERVICE_CALL,
    EVOLIS_MI_AVANSIA_ERR_READ_MAGNETIC,
    EVOLIS_MI_AVANSIA_ERR_WRITE_MAGNETIC,
    EVOLIS_MI_AVANSIA_ERR_IC_ERROR,
    EVOLIS_MI_AVANSIA_INF_UNKNOWN_RIBBON,
    EVOLIS_MI_AVANSIA_ERR_MANUAL_REQUIRED,
    EVOLIS_MI_AVANSIA_OPT_MAGNETIC,
} evolis_minor_state_t;

/// Get device state.
EVOLIS_LIB int evolis_get_state(evolis_t* printer, evolis_major_state_t* major, evolis_minor_state_t* minor);

/// Helper to convert major state to a string.
EVOLIS_LIB const char* evolis_get_major_string(evolis_major_state_t major);

/// Helper to convert minor state to a string.
EVOLIS_LIB const char* evolis_get_minor_string(evolis_minor_state_t minor);

///
/// ToC/CARD OPERATIONS
/// -------------------
///

/// The following card entries are available for Evolis printers. Some entries
/// are not valid for all printers. See notes below for details.
///
/// @see evolis_set_input_tray()
typedef enum evolis_intray_e {
    /// The card insertion will be made with the cards feeder.
    /// Available for: Avansia, Zenius, Primacy, KC200, KC200B, KM500B and KM2000B.
    EVOLIS_IT_FEEDER = 1,

    /// The card insertion will be made card by card.
    /// Available for: Zenius, Primacy and Elypso.
    EVOLIS_IT_MANUAL = 2,

    /// The card insertion will be made card by card but will be triggered when
    /// a insertion command is received by the printer.
    /// Supported by Avansia, Zenius, Primacy, Elypso, KC200, KC200B, KM500B and KM2000B.
    ///
    /// To use this with Avansia printers, you will have to call `evolis_insert()`
    /// during the printing process in order to trigger the card insertion.
    /// @see avansia_print_status()
    EVOLIS_IT_MANUALANDCMD = 4,

    /// The card insertion will be made from printer's bezel.
    /// Supported by KC200B, KM500B and KM2000B.
    EVOLIS_IT_BEZEL = 8,

    /// The card insertion can be made from to ways:
    ///
    ///   - For Zenius printers the card insertion will be accepted from FEEDER or MANUAL.
    ///   - For KC200B, KM500B and KM2000B, the card insertion will be accepted from FEEDER and BEZEL.
    /// EVOLIS_IT_FEEDER OR EVOLIS_IT_MANUAL:
    EVOLIS_IT_BOTH = 16,

    /// Only available for customized printers without any feeder.
    EVOLIS_IT_NOFEEDER = 32,
} evolis_intray_t;

/// The following card exit are available for Evolis printers. Some of the exits
/// are not valid for all printers. See notes below for details.
///
/// @see evolis_set_output_tray()
/// @see evolis_set_error_tray()
typedef enum evolis_outtray_e {
    /// Eject the card in the standard output tray (receptacle).
    /// Supported by Avansia, Zenius, Primacy, KC200, KC200B, KM500B and KM2000B.
    ///
    /// For Avansia printers the standard exit is the left side of the printer.
    EVOLIS_OT_STANDARD = 1,

    /// Supported by Avansia printers only. If set, the printer will wait for
    /// ejection command (see `evolis_eject()`) at the end of print.
    EVOLIS_OT_STANDARDSTANDBY = 2,

    /// Card by card ejection mode.
    /// Supported by Zenius and Elypso printers.
    EVOLIS_OT_MANUAL = 4,

    /// Card will be ejected in the rejection tray.
    /// Supported by Avansia, Zenius, Primacy, Elypso, KC200, KM500B and KM2000B.
    ///
    /// With Avansia printers, the standard rejection tray is the right side.
    EVOLIS_OT_ERROR = 8,

    /// Supported by Avansia printers only. If set, the printer will wait for
    /// ejection command (see `evolis_eject()`) at the end of print.
    EVOLIS_OT_ERRORSTANDBY = 16,

    /// Eject the card without waiting.
    /// Supported by Zenius and Elypso printers.
    EVOLIS_OT_EJECT = 32,

    /// Eject the card through the bezel.
    /// Supported by KC200B, KM500B and KM2000B.
    EVOLIS_OT_BEZEL = 64,

    /// Eject the card through the lower reject slot.
    /// Supported by KC200, KC200B, KM500B and KM2000B.
    EVOLIS_OT_ERRORSLOT = 128,

    /// Eject the card to the locked box.
    /// Supported by Primacys with locking system.
    EVOLIS_OT_LOCKED = 256,
} evolis_outtray_t;

/// Below is the available card positions that you can use. Some could be
/// unavailable for your printer. See notes below for details.
typedef enum evolis_pos_e {
    /// Insert a card in the printer.
    ///
    /// For Avansia printers, the insert is made inside a printing job when the
    /// return status of `avansia_print_restult()` is `AVANSIA_PR_STANDBY_INS`.
    EVOLIS_CP_INSERT,

    /// Eject the card from the printer.
    ///
    /// For Avansia printers, the eject is made inside a printing job when the
    /// return status of `avansia_print_result()` is `AVANSIA_PR_STANDBY_EJE`.
    EVOLIS_CP_EJECT,

    /// Reject the card from the printer.
    ///
    /// TODO
    /// For Avansia printers, the insert is made inside a printing job when the
    /// return status is STANDBY. TODO Terminer la doc en fonction du retour de print_exec().
    EVOLIS_CP_REJECT,

    /// Move the card to the back of the printer.
    /// The card is inserted if none in the printer.
    EVOLIS_CP_BACK,

    /// Move the card to the smart station.
    /// The card is inserted if none in the printer.
    EVOLIS_CP_CONTACT,

    /// Move the card to the contact station.
    /// The card is inserted if none in the printer.
    EVOLIS_CP_CONTACTLESS,

    /// Move the card in order to scan it (below the contact station).
    /// The card is inserted if none in the printer.
    EVOLIS_CP_SCAN,

    /// Insert then eject a card from the printer.
    EVOLIS_CP_INSERTEJECT,
} evolis_pos_t;

/// Set card insertion mode.
EVOLIS_LIB int evolis_set_input_tray(evolis_t* printer, evolis_intray_t tray);

/// Get card insertion mode value.
EVOLIS_LIB int evolis_get_input_tray(evolis_t* printer, evolis_intray_t* tray);

/// Set card ejection mode.
EVOLIS_LIB int evolis_set_output_tray(evolis_t* printer, evolis_outtray_t tray);

/// Get card ejection mode value.
EVOLIS_LIB int evolis_get_output_tray(evolis_t* printer, evolis_outtray_t* tray);

/// Set card rejection mode.
EVOLIS_LIB int evolis_set_error_tray(evolis_t* printer, evolis_outtray_t tray);

/// Get rejection mode value.
EVOLIS_LIB int evolis_get_error_tray(evolis_t* printer, evolis_outtray_t* tray);

/// Move the card in the printer.
EVOLIS_LIB int evolis_set_card_pos(evolis_t* printer, evolis_pos_t pos);

/// Insert a card in the printer.
EVOLIS_LIB int evolis_insert(evolis_t* printer);

/// Eject a card from the printer.
EVOLIS_LIB int evolis_eject(evolis_t* printer);

/// Reject a card from the printer.
EVOLIS_LIB int evolis_reject(evolis_t* printer);

///
/// ToC/MAG ENCODING
/// ----------------
///

/// List available track formats.
/// @see evolis_mag_tracks_t
typedef enum evolis_mag_format_e {
    EVOLIS_MF_ISO1, //!< Accepts alphanumeric characters, see ISO/IEC-7811 for details.
    EVOLIS_MF_ISO2, //!< Accepts numeric characters, see ISO/IEC-7811 for details.
    EVOLIS_MF_ISO3, //!< Accepts numeric characters, see ISO/IEC-7811 for details.
    EVOLIS_MF_SIPASS
} evolis_mag_format_t;

/// List coercivity level of magnetic stripes of the card.
/// @see evolis_mag_tracks_t
typedef enum evolis_mag_coercivity_e {
    /// Automatic mode, the printer will find the coercivity alone.
    EVOLIS_MC_AUTO = 'a',

    /// Low coercivity cards.
    EVOLIS_MC_LOCO = 'l',

    /// High coercivity cards.
    EVOLIS_MC_HICO = 'h',
} evolis_mag_coercivity_t;

/// Structure for reading/writing on magnetic tracks.
typedef struct evolis_mag_tracks_s {
    /// Tracks data.
    char tracks[3][256];

    /// The format to use for reading/writing data.
    evolis_mag_format_t formats[3];

    /// The coercivity to use for reading/writing on the card.
    evolis_mag_coercivity_t coercivity;
} evolis_mag_tracks_t;

/// Initialize `evolis_mag_tracks_t` structure with default values.
EVOLIS_LIB void evolis_mag_init(evolis_mag_tracks_t* tracks);

/// Write mag tracks to the card.
EVOLIS_LIB int evolis_mag_write(evolis_t* printer, evolis_mag_tracks_t* tracks);

/// Read mag tracks from the card.
EVOLIS_LIB int evolis_mag_read(evolis_t* printer, evolis_mag_tracks_t* tracks);

///
/// ToC/IMAGE PROCESSING
/// --------------------
///

/// List of all supported barcode types.
/// @see evolis_print_set_barcode()
typedef enum evolis_barcode_e {
    EVOLIS_BC_CODE11          = 1,
    EVOLIS_BC_C25STANDARD     = 2,
    EVOLIS_BC_C25MATRIX       = 2,
    EVOLIS_BC_C25INTER        = 3,
    EVOLIS_BC_C25IATA         = 4,
    EVOLIS_BC_C25LOGIC        = 6,
    EVOLIS_BC_C25IND          = 7,
    EVOLIS_BC_CODE39          = 8,
    EVOLIS_BC_EXCODE39        = 9,
    EVOLIS_BC_EANX            = 13,
    EVOLIS_BC_EANX_CHK        = 14,
    EVOLIS_BC_GS1_128         = 16,
    EVOLIS_BC_EAN128          = 16,
    EVOLIS_BC_CODABAR         = 18,
    EVOLIS_BC_CODE128         = 20,
    EVOLIS_BC_DPLEIT          = 21,
    EVOLIS_BC_DPIDENT         = 22,
    EVOLIS_BC_CODE16K         = 23,
    EVOLIS_BC_CODE49          = 24,
    EVOLIS_BC_CODE93          = 25,
    EVOLIS_BC_FLAT            = 28,
    EVOLIS_BC_DBAR_OMN        = 29,
    EVOLIS_BC_RSS14           = 29,
    EVOLIS_BC_DBAR_LTD        = 30,
    EVOLIS_BC_RSS_LTD         = 30,
    EVOLIS_BC_DBAR_EXP        = 31,
    EVOLIS_BC_RSS_EXP         = 31,
    EVOLIS_BC_TELEPEN         = 32,
    EVOLIS_BC_UPCA            = 34,
    EVOLIS_BC_UPCA_CHK        = 35,
    EVOLIS_BC_UPCE            = 37,
    EVOLIS_BC_UPCE_CHK        = 38,
    EVOLIS_BC_POSTNET         = 40,
    EVOLIS_BC_MSI_PLESSEY     = 47,
    EVOLIS_BC_FIM             = 49,
    EVOLIS_BC_LOGMARS         = 50,
    EVOLIS_BC_PHARMA          = 51,
    EVOLIS_BC_PZN             = 52,
    EVOLIS_BC_PHARMA_TWO      = 53,
    EVOLIS_BC_PDF417          = 55,
    EVOLIS_BC_PDF417COMP      = 56,
    EVOLIS_BC_PDF417TRUNC     = 56,
    EVOLIS_BC_MAXICODE        = 57,
    EVOLIS_BC_QRCODE          = 58,
    EVOLIS_BC_CODE128B        = 60,
    EVOLIS_BC_AUSPOST         = 63,
    EVOLIS_BC_AUSREPLY        = 66,
    EVOLIS_BC_AUSROUTE        = 67,
    EVOLIS_BC_AUSREDIRECT     = 68,
    EVOLIS_BC_ISBNX           = 69,
    EVOLIS_BC_RM4SCC          = 70,
    EVOLIS_BC_DATAMATRIX      = 71,
    EVOLIS_BC_EAN14           = 72,
    EVOLIS_BC_VIN             = 73,
    EVOLIS_BC_CODABLOCKF      = 74,
    EVOLIS_BC_NVE18           = 75,
    EVOLIS_BC_JAPANPOST       = 76,
    EVOLIS_BC_KOREAPOST       = 77,
    EVOLIS_BC_DBAR_STK        = 79,
    EVOLIS_BC_RSS14STACK      = 79,
    EVOLIS_BC_DBAR_OMNSTK     = 80,
    EVOLIS_BC_RSS14STACK_OMNI = 80,
    EVOLIS_BC_DBAR_EXPSTK     = 81,
    EVOLIS_BC_RSS_EXPSTACK    = 81,
    EVOLIS_BC_PLANET          = 82,
    EVOLIS_BC_MICROPDF417     = 84,
    EVOLIS_BC_USPS_IMAIL      = 85,
    EVOLIS_BC_ONECODE         = 85,
    EVOLIS_BC_PLESSEY         = 86,

    /* Barcode 8 codes */
    EVOLIS_BC_TELEPEN_NUM     = 87,
    EVOLIS_BC_ITF14           = 89,
    EVOLIS_BC_KIX             = 90,
    EVOLIS_BC_AZTEC           = 92,
    EVOLIS_BC_DAFT            = 93,
    EVOLIS_BC_DPD             = 96,
    EVOLIS_BC_MICROQR         = 97,

    /* Barcode 9 codes */
    EVOLIS_BC_HIBC_128        = 98,
    EVOLIS_BC_HIBC_39         = 99,
    EVOLIS_BC_HIBC_DM         = 102,
    EVOLIS_BC_HIBC_QR         = 104,
    EVOLIS_BC_HIBC_PDF        = 106,
    EVOLIS_BC_HIBC_MICPDF     = 108,
    EVOLIS_BC_HIBC_BLOCKF     = 110,
    EVOLIS_BC_HIBC_AZTEC      = 112,

    /* Barcode 10 codes */
    EVOLIS_BC_DOTCODE         = 115,
    EVOLIS_BC_HANXIN          = 116,

    /*Barcode 11 codes*/
    EVOLIS_BC_MAILMARK        = 121,

    /* Specific barcodes */
    EVOLIS_BC_AZRUNE          = 128,
    EVOLIS_BC_CODE32          = 129,
    EVOLIS_BC_EANX_CC         = 130,
    EVOLIS_BC_GS1_128_CC      = 131,
    EVOLIS_BC_EAN128_CC       = 131,
    EVOLIS_BC_DBAR_OMN_CC     = 132,
    EVOLIS_BC_RSS14_CC        = 132,
    EVOLIS_BC_DBAR_LTD_CC     = 133,
    EVOLIS_BC_RSS_LTD_CC      = 133,
    EVOLIS_BC_DBAR_EXP_CC     = 134,
    EVOLIS_BC_RSS_EXP_CC      = 134,
    EVOLIS_BC_UPCA_CC         = 135,
    EVOLIS_BC_UPCE_CC         = 136,
    EVOLIS_BC_DBAR_STK_CC     = 137,
    EVOLIS_BC_RSS14STACK_CC   = 137,
    EVOLIS_BC_DBAR_OMNSTK_CC  = 138,
    EVOLIS_BC_RSS14_OMNI_CC   = 138,
    EVOLIS_BC_DBAR_EXPSTK_CC  = 139,
    EVOLIS_BC_RSS_EXPSTACK_CC = 139,
    EVOLIS_BC_CHANNEL         = 140,
    EVOLIS_BC_CODEONE         = 141,
    EVOLIS_BC_GRIDMATRIX      = 142,
    EVOLIS_BC_UPNQR           = 143,
    EVOLIS_BC_ULTRA           = 144,
    EVOLIS_BC_RMQR            = 145
} evolis_barcode_t;

/// References the font types.
/// @see evolis_set_font()
typedef enum evolis_font_e {
    EVOLIS_FT_SIMPLEX,          //!< normal size sans-serif font
    EVOLIS_FT_PLAIN,            //!< small size sans-serif font
    EVOLIS_FT_DUPLEX,           //!< normal size sans-serif font (more complex than EVOLIS_FT_SIMPLEX)
    EVOLIS_FT_COMPLEX,          //!< normal size serif font
    EVOLIS_FT_TRIPLEX,          //!< normal size serif font (more complex than EVOLIS_FT_COMPLEX)
    EVOLIS_FT_COMPLEX_SMALL,    //!< smaller version of EVOLIS_FT_COMPLEX
    EVOLIS_FT_SCRIPT_SIMPLEX,   //!< hand-writing style font
    EVOLIS_FT_SCRIPT_COMPLEX,   //!< more complex variant of EVOLIS_FT_SCRIPT_SIMPLEX
    EVOLIS_FT_ITALIC,           //!< flag for italic font
    EVOLIS_FT_PATH
} evolis_font_t;

typedef enum evolis_ratio_e {
    EVOLIS_RT_IGNORE,   //!< The image is scaled to fit the bounding box.
    EVOLIS_RT_KEEP,     //!< Keep the aspect ratio of the image.
    EVOLIS_RT_EXPAND    //!< Expand to fill the bounding box while keeping image ratio.
} evolis_ratio_t;

/// An internal type representing an image.
/// @see evolis_image_new()
/// @see evolis_image_delete()
typedef void evolis_image_t;

/// Create a new instance of the image builder.
EVOLIS_LIB evolis_image_t* evolis_image_new();

/// Clone the image.
EVOLIS_LIB evolis_image_t* evolis_image_clone(evolis_image_t* img);

/// Destroys the image builder.
EVOLIS_LIB void evolis_image_delete(evolis_image_t* img);

/// Save the resulting image to a file.
EVOLIS_LIB int evolis_renderp(evolis_image_t* img, const char* path);

/// Save the resulting image to a buffer (.bmp format).
EVOLIS_LIB int evolis_renderb(evolis_image_t* img, char* out, size_t* outSize);

/// Set the image buffer to print.
EVOLIS_LIB int evolis_draw_imageb(evolis_image_t* img, const char* data, size_t size, int angle);

/// Set the image path to print.
EVOLIS_LIB int evolis_draw_imagep(evolis_image_t* img, const char* path, int angle);

/// Set font used for text drawings.
EVOLIS_LIB void evolis_set_font(evolis_image_t* img, evolis_font_t font, int size, int color, int thickness);

/// Load font from file.
EVOLIS_LIB void evolis_set_fontp(evolis_image_t* img, const char* path, int size, int color);

/// Draw a text on top of the image.
EVOLIS_LIB int evolis_draw_text(evolis_image_t* img, int x, int y, int angle, const char* text);

/// Set the barcode type to use for drawing.
EVOLIS_LIB void evolis_set_barcode(evolis_image_t* img, evolis_barcode_t bc, int height, int multiplier, bool showBcText);

/// Set a barcode to the preset image or a blank image.
EVOLIS_LIB int evolis_draw_barcode(evolis_image_t* img, int x, int y, int angle, const char* data);

/// Set the bounding box on the image (used for images).
EVOLIS_LIB void evolis_set_bounding_box(evolis_image_t* img, int x, int y, int w, int h);

/// Get the bounding box values.
EVOLIS_LIB void evolis_get_bounding_box(evolis_image_t* img, int* x, int* y, int* w, int* h);

/// Set the type of ratio to use when scaling the image.
EVOLIS_LIB void evolis_set_ratio(evolis_image_t* img, evolis_ratio_t ratio);

/// Get the ratio.
EVOLIS_LIB evolis_ratio_t evolis_get_ratio(evolis_image_t* img);

///
/// ToC/PRINTING
/// ------------
///

/// References the card face.
/// @see evolis_print_set_bitmap()
typedef enum evolis_face_e {
    EVOLIS_FA_FRONT,               //!< Front face of the card.
    EVOLIS_FA_BACK,                //!< Back face of the card.
} evolis_face_t;

/// Print a test card.
EVOLIS_LIB int evolis_print_test_card(evolis_t* printer, int type);

/// Initialize a new printing session.
EVOLIS_LIB int evolis_print_init(evolis_t* printer);

/// Set a print processing option.
EVOLIS_LIB int evolis_print_set_option(evolis_t* printer, const char* key, const char* value);

/// Get value of a print processing option.
EVOLIS_LIB const char* evolis_print_get_option(evolis_t* printer, const char* key);

/// Set the image to print.
EVOLIS_LIB int evolis_print_set_image(evolis_t* printer, evolis_face_t face, const evolis_image_t* img);

/// Set the image path to print.
EVOLIS_LIB int evolis_print_set_imagep(evolis_t* printer, evolis_face_t face, const char* path);

/// Set the image buffer to print.
EVOLIS_LIB int evolis_print_set_imageb(evolis_t* printer, evolis_face_t face, const char* data, size_t size);

/// Start printing.
EVOLIS_LIB int evolis_print_exec(evolis_t* printer);

///
/// ToC/LOGGING / TODO - Use evocore::Log.
/// -----------
///

/// Log level values.
typedef enum evolis_log_e {
    EVOLIS_LG_DEBUG,    //!< Show ERROR, WARNING, INFO, DEBUG messages.
    EVOLIS_LG_INFO,     //!< Show ERROR, WARNING, INFO messages.
    EVOLIS_LG_WARNING,  //!< Show ERROR, WARNING messages.
    EVOLIS_LG_ERROR,    //!< Show ERROR messages.
} evolis_log_t;

/// Sets the file where messages are stored.
EVOLIS_LIB void evolis_log_set_path(const char* path);

/// Sets the log level (`EVOLIS_LG_ERROR` by default).
EVOLIS_LIB void evolis_log_set_level(evolis_log_t level);

///
/// ToC/FILE HELPERS
/// ----------------
///

/// Load a file from disk.
EVOLIS_LIB int evolis_file_read(const char* filename, char** data, size_t* size);

/// Save a file to disk.
EVOLIS_LIB int evolis_file_write(const char* filename, const char* data, size_t size);

/// Free memory allocated by `evolis_file_read()`.
EVOLIS_LIB void evolis_file_free(char* p);

#include "evo-printers.h"
#include "ava-printers.h"

#ifdef __cplusplus
}
#endif

#endif // EVOLIS_H
